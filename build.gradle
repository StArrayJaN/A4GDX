import java.nio.file.Files
import java.nio.file.StandardCopyOption

buildscript {
  repositories {
    maven { url 'https://maven.aliyun.com/repository/public/' }
    maven { url 'https://maven.aliyun.com/repository/google/' }
    maven { url 'https://maven.aliyun.com/repository/gradle-plugin/' }
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    gradlePluginPortal()
    mavenLocal()
    google()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
  }
  dependencies {
    classpath "com.android.tools.build:gradle:8.2.0"
  }
}

allprojects {
  apply plugin: 'eclipse'
  apply plugin: 'idea'

  // This allows you to "Build and run using IntelliJ IDEA", an option in IDEA's Settings.
  idea {
    module {
      outputDir file('build/classes/java/main')
      testOutputDir file('build/classes/java/test')
    }
  }
}

configure(subprojects - project(':android')) {
  apply plugin: 'java-library'
  apply plugin: 'groovy'
  sourceCompatibility = 17

  // From https://lyze.dev/2021/04/29/libGDX-Internal-Assets-List/
  // The article can be helpful when using assets.txt in your project.
  tasks.register('generateAssetList') {
    inputs.dir("${project.rootDir}/assets/")
    // projectFolder/assets
    File assetsFolder = new File("${project.rootDir}/assets/")
    // projectFolder/assets/assets.txt
    File assetsFile = new File(assetsFolder, "assets.txt")
    // delete that file in case we've already created it
    assetsFile.delete()

    // iterate through all files inside that folder
    // convert it to a relative path
    // and append it to the file assets.txt
    fileTree(assetsFolder).collect { assetsFolder.relativePath(it) }.sort().each {
      assetsFile.append(it + "\n")
    }
  }
  processResources.dependsOn 'generateAssetList'

  compileJava {
    options.incremental = true
  }
}

tasks.register('buildExecutable') {
  dependsOn("android:assembleDebug")
  dependsOn("lwjgl3:createExe")
  doLast {
    File[] files = new File(".", "release").listFiles()
    if (files != null) {
      for (File file : files) {
        file.delete()
      }
    }
    copy("lwjgl3/build/launch4j/A4GDX-${projectVersion}.exe", "release/A4GDX-${projectVersion}.exe")
    copy("android/build/outputs/apk/debug/android-debug.apk", "release/A4GDX-${projectVersion}.apk")
    copy("lwjgl3/build/libs/A4GDX-${projectVersion}.jar", "release/A4GDX-${projectVersion}.jar")
  }
}

static void copy(String source, String destination) {
  String workDir = System.getProperty("user.dir")
  Files.copy(new File(workDir,source).toPath(), new File(workDir,destination).toPath(), StandardCopyOption.REPLACE_EXISTING)
}

subprojects {
  version = "$projectVersion"
  ext.appName = 'A4GDX'
  repositories {
  maven { url 'https://maven.aliyun.com/repository/google/' }
    mavenCentral()
    maven { url 'https://s01.oss.sonatype.org' }
    // You may want to remove the following line if you have errors downloading dependencies.
    mavenLocal()
    maven { url 'https://oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://s01.oss.sonatype.org/content/repositories/snapshots/' }
    maven { url 'https://jitpack.io' }
  }
}

eclipse.project.name = 'A4GDX' + '-parent'
